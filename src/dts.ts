export class JayData{
    static src:string = "declare module $data{\r\n    class Geography{}\r\n    class GeographyLineString{}\r\n    class GeographyPolygon{}\r\n    class GeographyMultiPoint{}\r\n    class GeographyMultiPolygon{}\r\n    class GeographyMultiLineString{}\r\n    class GeographyCollection{}\r\n\r\n    class Geometry{}\r\n    class GeometryLineString{}\r\n    class GeometryPolygon{}\r\n    class GeometryMultiPoint{}\r\n    class GeometryMultiPolygon{}\r\n    class GeometryMultiLineString{}\r\n    class GeometryCollection{}\r\n    \r\n    const enum EntityState{\r\n        Detached = 0,\r\n        Unchanged = 10,\r\n        Added = 20,\r\n        Modified = 30,\r\n        Deleted = 40\r\n    }\r\n    \r\n    interface MemberDefinition{\r\n        name: string;\r\n        type: any;\r\n        dataType: any;\r\n        elementType: any;\r\n        originalType: any;\r\n        kind: string;\r\n        classMember: boolean;\r\n        set: (value:any) => void;\r\n        get: () => any;\r\n        value: any;\r\n        initialValue: any;\r\n        method: Function;\r\n        enumerable: boolean;\r\n        configurable: boolean;\r\n        key: boolean;\r\n        computed: boolean;\r\n        storeOnObject: boolean;\r\n        monitorChanges: boolean;\r\n    }\r\n    \r\n    interface Event{\r\n        attach(eventHandler: (sender: any, event: any) => void ): void;\r\n        detach(eventHandler: () => void ): void;\r\n        fire(e: any, sender: any): void;\r\n    }\r\n\r\n    class Base<T>{\r\n        constructor();\r\n        getType: () => typeof Base;\r\n        \r\n        static addProperty(name:string, getterOrType:string | Function, setterOrGetter?:Function, setter?:Function): void;\r\n        static addMember(name:string, definition:any, isClassMember?:boolean): void;\r\n        static describeField(name:string, definition:any): void;\r\n        \r\n        static hasMetadata(key:string, property?:string): boolean;\r\n        static getAllMetadata(property?:string): any;\r\n        static getMetadata(key:string, property?:string): any;\r\n        static setMetadata(key:string, value:any, property?:string): void;\r\n    }\r\n    \r\n    class Enum extends Base<Enum>{\r\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Enum>;\r\n    }\r\n    function createEnum(name:string, enumType:any, enumDefinition?:any): Base<Enum>;\r\n    \r\n    class Entity extends Base<Entity>{\r\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Entity>;\r\n        \r\n        entityState: EntityState;\r\n        changedProperties: MemberDefinition[];\r\n        \r\n        propertyChanging: Event;\r\n        propertyChanged: Event;\r\n        propertyValidationError: Event;\r\n        isValid: boolean;\r\n    }\r\n    \r\n    class EntitySet<Ttype extends typeof Entity, T extends Entity> extends Queryable<T>{\r\n        add(item: T): T;\r\n        add(initData: {}): T;\r\n        attach(item: T): void;\r\n        attach(item: {}): void;\r\n        attachOrGet(item: T): T;\r\n        attachOrGet(item: {}): T;\r\n        detach(item: T): void;\r\n        detach(item: {}): void;\r\n        remove(item: T): void;\r\n        remove(item: {}): void;\r\n        elementType: Ttype;\r\n    }\r\n    \r\n    class EntityContext extends Base<EntityContext>{\r\n        constructor(config?: any);\r\n        onReady(): Promise<EntityContext>;\r\n        saveChanges(): Promise<number>;\r\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<EntityContext>;\r\n    }\r\n\r\n    class Queryable<T extends Entity | Edm.Primitive>{\r\n        filter(predicate: (it: T) => boolean, thisArg?: any): Queryable<T>;\r\n        filter(predicate: string, thisArg?: any): Queryable<T>;\r\n        map(projection: (it: T) => any): Queryable<any>;\r\n        map(projection: string): Queryable<any>;\r\n        orderBy(predicate: (it: T) => void): Queryable<T>;\r\n        orderBy(predicate: string): Queryable<T>;\r\n        orderByDescending(predicate: (it: T) => void): Queryable<T>;\r\n        orderByDescending(predicate: string): Queryable<T>;\r\n        include(selector: string): Queryable<T>;\r\n        skip(amount: number): Queryable<T>;\r\n        take(amount: number): Queryable<T>;\r\n        forEach(handler: (it: T) => void): Promise<T>;\r\n        length(): Promise<number>;\r\n        toArray(): Promise<T[]>;\r\n        single(predicate: (it: T) => boolean, params?: any): Promise<T>;\r\n        single(predicate: string, params?: any): Promise<T>;\r\n        first(predicate?: (it: T) => boolean, params?: any): Promise<T>;\r\n        first(predicate?: string, params?: any): Promise<T>;\r\n        removeAll(): Promise<number>;\r\n    }\r\n    class ServiceAction{}\r\n    class ServiceFunction{}\r\n    \r\n    function implementation(name:string): typeof Base;\r\n}\r\n\r\ndeclare module JavaScript {\r\n    type _Date = Date;\r\n}\r\n\r\ndeclare module Edm {\r\n    type Boolean = boolean;\r\n    type Binary = Uint8Array;\r\n    type DateTime = JavaScript._Date;\r\n    type DateTimeOffset = JavaScript._Date;\r\n    type Duration = string;\r\n    type TimeOfDay = string;\r\n    type Date = string;\r\n    type Time = string;\r\n    type Decimal = string;\r\n    type Single = number;\r\n    type Float = number;\r\n    type Double = number;\r\n    type Guid = string;\r\n    type Int16 = number;\r\n    type Int32 = number;\r\n    type Int64 = string;\r\n    type Byte = number;\r\n    type SByte = number;\r\n    type String = string;\r\n    type GeographyPoint = $data.Geography;\r\n    type GeographyLineString = $data.GeographyLineString;\r\n    type GeographyPolygon = $data.GeographyPolygon;\r\n    type GeographyMultiPoint = $data.GeographyMultiPoint;\r\n    type GeographyMultiPolygon = $data.GeographyMultiPolygon;\r\n    type GeographyMultiLineString = $data.GeographyMultiLineString;\r\n    type GeographyCollection = $data.GeographyCollection;\r\n    type GeometryPoint = $data.Geometry;\r\n    type GeometryLineString = $data.GeometryLineString;\r\n    type GeometryPolygon = $data.GeometryPolygon;\r\n    type GeometryMultiPoint = $data.GeometryMultiPoint;\r\n    type GeometryMultiPolygon = $data.GeometryMultiPolygon;\r\n    type GeometryMultiLineString = $data.GeometryMultiLineString;\r\n    type GeometryCollection = $data.GeometryCollection;\r\n    type Primitive =\r\n        Boolean | Binary | Guid | DateTime | DateTimeOffset | Duration | TimeOfDay | Date | Time |\r\n        Decimal | Single | Float | Double | Int16 | Int32 | Int64 | Byte | SByte | String |\r\n        GeographyPoint | GeographyLineString | GeographyPolygon | GeographyMultiPoint | GeographyMultiLineString | GeographyMultiPolygon | GeographyCollection |\r\n        GeometryPoint | GeometryLineString | GeometryPolygon | GeometryMultiPoint | GeometryMultiLineString | GeometryMultiPolygon | GeometryCollection;\r\n}"
}